{"version":3,"sources":["common/mocks/RequestClientMock.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,8CAAyH;AAEzH;IAAuC,qCAAY;IAAnD;QAAA,qEA2CC;QA1CU,cAAQ,GAA4F,EAAE,CAAC;;IA0ClH,CAAC;IAxCU,iCAAK,GAAZ,UAAa,GAAW,EAAE,aAAwC,EAAE,OAA6B;QAC7F,IAAI,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,EAA/C,CAA+C,CAAC,CAAC,CAAC,CAAC,CAAC;QACrG,IAAI,QAAkB,CAAC;QACvB,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACjB,QAAQ,GAAG,IAAI,QAAQ,CAAC,cAAc,CAAC,YAAY,EAAE;gBACjD,MAAM,EAAE,GAAG;gBACX,UAAU,EAAE,IAAI;aACnB,CAAC,CAAC;QACP,CAAC;QACD,IAAI,CAAC,CAAC;YACF,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,EAAE;gBAC1B,MAAM,EAAE,GAAG;gBACX,UAAU,EAAE,WAAW;aAC1B,CAAC,CAAC;QACP,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,8BAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC/D,CAAC;IACM,oCAAQ,GAAf,UAAgB,GAAW,EAAE,aAAwC,EAAE,OAA8B;QACjG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IACM,+BAAG,GAAV,UAAW,GAAW,EAAE,aAAwC,EAAE,OAA8B;QAC5F,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IACM,gCAAI,GAAX,UAAY,GAAW,EAAE,aAAwC,EAAE,OAA8B;QAC7F,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IACM,iCAAK,GAAZ,UAAa,GAAW,EAAE,aAAwC,EAAE,OAA8B;QAC9F,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IACM,kCAAM,GAAb,UAAc,GAAW,EAAE,aAAwC,EAAE,OAA8B;QAC/F,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IACL,wBAAC;AAAD,CA3CA,AA2CC,CA3CsC,sBAAY,GA2ClD;AA3CY,8CAAiB","file":"common/mocks/RequestClientMock.js","sourcesContent":["import { SPHttpClient, SPHttpClientConfiguration, ISPHttpClientOptions, SPHttpClientResponse } from '@microsoft/sp-http';\r\n\r\nexport class RequestClientMock extends SPHttpClient {\r\n    public Requests: { url: string, method: string, options?: ISPHttpClientOptions, resultString: string }[] = [];\r\n    public OnRequest: (url: string, method: string, options?: ISPHttpClientOptions) => void;\r\n    public fetch(url: string, configuration: SPHttpClientConfiguration, options: ISPHttpClientOptions): Promise<SPHttpClientResponse> {\r\n        let mockedResponse = this.Requests.filter(req => req.method === options.method && req.url == url)[0];\r\n        let response: Response;\r\n        if (mockedResponse) {\r\n            response = new Response(mockedResponse.resultString, {\r\n                status: 200,\r\n                statusText: \"Ok\"\r\n            });\r\n        }\r\n        else {\r\n            response = new Response(null, {\r\n                status: 404,\r\n                statusText: \"Not fount\",\r\n            });\r\n        }\r\n        return Promise.resolve(new SPHttpClientResponse(response));\r\n    }\r\n    public fetchRaw(url: string, configuration: SPHttpClientConfiguration, options?: ISPHttpClientOptions): Promise<SPHttpClientResponse> {\r\n        return this.fetch(url, configuration, options);\r\n    }\r\n    public get(url: string, configuration: SPHttpClientConfiguration, options?: ISPHttpClientOptions): Promise<SPHttpClientResponse> {\r\n        options = options || {};\r\n        options.method = \"GET\";\r\n        return this.fetch(url, configuration, options);\r\n    }\r\n    public post(url: string, configuration: SPHttpClientConfiguration, options?: ISPHttpClientOptions): Promise<SPHttpClientResponse> {\r\n        options = options || {};\r\n        options.method = \"POST\";\r\n        return this.fetch(url, configuration, options);\r\n    }\r\n    public patch(url: string, configuration: SPHttpClientConfiguration, options?: ISPHttpClientOptions): Promise<SPHttpClientResponse> {\r\n        options = options || {};\r\n        options.method = \"PATCH\";\r\n        return this.fetch(url, configuration, options);\r\n    }\r\n    public delete(url: string, configuration: SPHttpClientConfiguration, options?: ISPHttpClientOptions): Promise<SPHttpClientResponse> {\r\n        options = options || {};\r\n        options.method = \"DELETE\";\r\n        return this.fetch(url, configuration, options);\r\n    }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}