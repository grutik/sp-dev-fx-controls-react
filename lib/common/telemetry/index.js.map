{"version":3,"sources":["common/telemetry/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,kDAA6C;AAC7C,qCAAoC;AACpC,8DAA0E;AAE1E,IAAM,YAAY,GAAG,OAAO,CAAC;AAE7B;;;;;GAKG;AACH,eAAsB,aAAqB,EAAE,UAAoB;IAApB,2BAAA,EAAA,eAAoB;IAC/D,IAAM,SAAS,GAAG,sBAAY,CAAC,WAAW,EAAE,CAAC;IAC7C,SAAS,CAAC,UAAU,CAAC,aAAa,aAChC,OAAO,mBAAA,EACP,WAAW,EAAE,YAAY,EACzB,KAAK,EAAE,KAAK,GAAG,MAAM,GAAG,OAAO,EAC/B,WAAW,EAAE,iCAAe,CAAC,6BAAW,CAAC,IAAI,CAAC,IAC3C,UAAU,EACb,CAAC;AACL,CAAC;AATD,sBASC","file":"common/telemetry/index.js","sourcesContent":["import PnPTelemetry from \"@pnp/telemetry-js\";\r\nimport { version } from './version';\r\nimport { Environment, EnvironmentType } from \"@microsoft/sp-core-library\";\r\n\r\nconst CONTROL_TYPE = \"react\";\r\n\r\n/**\r\n * Track control information\r\n *\r\n * @param componentName\r\n * @param properties\r\n */\r\nexport function track(componentName: string, properties: any = {}): void {\r\n  const telemetry = PnPTelemetry.getInstance();\r\n  telemetry.trackEvent(componentName, {\r\n    version,\r\n    controlType: CONTROL_TYPE,\r\n    debug: DEBUG ? \"true\" : \"false\",\r\n    environment: EnvironmentType[Environment.type],\r\n    ...properties\r\n  });\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}