{"version":3,"sources":["controls/carousel/CarouselImage.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,+DAA4C;AAC5C,0DAAmE;AACnE,kEAA2D;AA+E3D;IAA2C,iCAAyD;IAApG;;IAuDA,CAAC;IAtDQ,8BAAM,GAAb;QACQ,IAAA,eAkBQ,EAjBZ,sBAAQ,EACR,gBAAwB,EAAxB,qDAAwB,EACxB,YAAG,EACH,gBAAK,EACL,4BAAW,EACX,cAAiB,EAAjB,sCAAiB,EACjB,0CAAkB,EAClB,wBAAS,EACT,gBAAK,EACL,8BAAY,EACZ,sBAAQ,EACR,sCAAgB,EAChB,8BAAY,EACZ,kCAAc,EACd,0BAAU,EACV,8CAAoB,EACpB,sCAAgB,CACH;QAEf,IAAI,OAAO,GAAuB,IAAI,CAAC;QACvC,IAAM,UAAU,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,WAAW,CAAC;QAE5C,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,IAAI,aAAa,SAAoB,CAAC;YACtC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChB,EAAE,CAAC,CAAC,OAAM,CAAC,WAAW,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACrC,aAAa,GAAG,8BAAM,SAAS,EAAE,oBAAoB,EAAE,KAAK,EAAE,gBAAgB,IAAG,WAAW,CAAQ,CAAC;gBACvG,CAAC;gBACD,IAAI,CAAC,CAAC;oBACJ,aAAa,GAAG,WAAW,CAAC;gBAC9B,CAAC;YACH,CAAC;YACD,IAAM,cAAc,GAAG,6BAAK,SAAS,EAAE,eAAG,CAAC,8BAAM,CAAC,OAAO,EAAE,gBAAgB,CAAC,EAAE,KAAK,EAAE,YAAY;gBAC9F,CAAC,CAAC,KAAK,IAAI,8BAAM,SAAS,EAAE,eAAG,CAAC,8BAAM,CAAC,KAAK,EAAE,cAAc,CAAC,EAAE,KAAK,EAAE,UAAU,IAAG,KAAK,CAAQ;gBAChG,aAAa,CACV,CAAC;YAEP,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,OAAO,GAAG,2BAAG,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,IAAG,cAAc,CAAK,CAAC;YAC/D,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,OAAO,GAAG,cAAc,CAAC;YAC3B,CAAC;QACH,CAAC;QAED,MAAM,CAAC,CACL,6BAAK,SAAS,EAAE,eAAG,CAAC,8BAAM,CAAC,aAAa,EAAE,SAAS,EAAE,kBAAkB,GAAG,8BAAM,CAAC,cAAc,GAAG,8BAAM,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,KAAK;YACnI,oBAAC,aAAK,IAAC,SAAS,EAAE,eAAG,CAAC,8BAAM,CAAC,KAAK,EAAE,YAAY,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,GAAI;YACxG,OAAO,CACJ,CACP,CAAC;IACJ,CAAC;IACH,oBAAC;AAAD,CAvDA,AAuDC,CAvD0C,KAAK,CAAC,SAAS,GAuDzD","file":"controls/carousel/CarouselImage.js","sourcesContent":["import * as React from 'react';\r\nimport styles from './Carousel.module.scss';\r\nimport { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';\r\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\r\n\r\n/**\r\n * Carousel Image component props\r\n */\r\nexport interface ICarouselImageProps {\r\n  /**\r\n   * Image source\r\n   */\r\n  imageSrc: string;\r\n  /**\r\n   * Specifies the method to be used to fit image\r\n   */\r\n  imageFit?: ImageFit;\r\n  /**\r\n   * URL to be opened when clicking on details\r\n   */\r\n  url?: string;\r\n  /**\r\n   * Title to display in details\r\n   */\r\n  title?: string;\r\n  /**\r\n   * Description to show in details.\r\n   * Can be either a string (text) or JSX.Element to show HTML\r\n   */\r\n  description?: string | JSX.Element;\r\n  /**\r\n   * Target of the URL to open\r\n   */\r\n  target?: '_blank' | '_self';\r\n  /**\r\n   * Specifies if the details are shown on hover or constantly\r\n   */\r\n  showDetailsOnHover?: boolean;\r\n  /**\r\n   * Class to apply to the component\r\n   */\r\n  className?: string;\r\n  /**\r\n   * Styles to apply to the component\r\n   */\r\n  style?: React.CSSProperties;\r\n  /**\r\n   * Class to apply to the image control\r\n   */\r\n  imgClassName?: string;\r\n  /**\r\n   * Styles to apply to the image control\r\n   */\r\n  imgStyle?: React.CSSProperties;\r\n  /**\r\n   * Class to apply to the details control\r\n   */\r\n  detailsClassName?: string;\r\n  /**\r\n   * Styles to apply to the details control\r\n   */\r\n  detailsStyle?: React.CSSProperties;\r\n  /**\r\n   * Class to apply to the title control\r\n   */\r\n  titleClassName?: string;\r\n  /**\r\n   * Styles to apply to the title control\r\n   */\r\n  titleStyle?: React.CSSProperties;\r\n  /**\r\n   * Class to apply to the description control\r\n   */\r\n  descriptionClassName?: string;\r\n  /**\r\n   * Class to apply to the description control\r\n   */\r\n  descriptionStyle?: React.CSSProperties;\r\n}\r\n\r\nexport interface ICarouselImageState { }\r\n\r\nexport default class CarouselImage extends React.Component<ICarouselImageProps, ICarouselImageState> {\r\n  public render(): React.ReactElement<ICarouselImageProps> {\r\n    const {\r\n      imageSrc,\r\n      imageFit = ImageFit.none,\r\n      url,\r\n      title,\r\n      description,\r\n      target = '_blank',\r\n      showDetailsOnHover,\r\n      className,\r\n      style,\r\n      imgClassName,\r\n      imgStyle,\r\n      detailsClassName,\r\n      detailsStyle,\r\n      titleClassName,\r\n      titleStyle,\r\n      descriptionClassName,\r\n      descriptionStyle\r\n    } = this.props;\r\n\r\n    let details: JSX.Element | null = null;\r\n    const hasDetails = !!title || !!description;\r\n\r\n    if (hasDetails) {\r\n      let descriptionEl: JSX.Element | null;\r\n      if (description) {\r\n        if (typeof(description) === 'string') {\r\n          descriptionEl = <span className={descriptionClassName} style={descriptionStyle}>{description}</span>;\r\n        }\r\n        else {\r\n          descriptionEl = description;\r\n        }\r\n      }\r\n      const detailsContent = <div className={css(styles.details, detailsClassName)} style={detailsStyle}>\r\n        {!!title && <span className={css(styles.title, titleClassName)} style={titleStyle}>{title}</span>}\r\n        {descriptionEl}\r\n      </div>;\r\n\r\n      if (url) {\r\n        details = <a href={url} target={target}>{detailsContent}</a>;\r\n      }\r\n      else {\r\n        details = detailsContent;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={css(styles.carouselImage, className, showDetailsOnHover ? styles.dynamicDetails : styles.staticDetails)} style={style}>\r\n        <Image className={css(styles.image, imgClassName)} style={imgStyle} imageFit={imageFit} src={imageSrc} />\r\n        {details}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}