{"version":3,"sources":["controls/carousel/ICarouselProps.ts"],"names":[],"mappings":";;AAIA;;GAEG;AACH,IAAY,uBAIX;AAJD,WAAY,uBAAuB;IACjC,mEAAO,CAAA;IACP,yEAAM,CAAA;IACN,yEAAM,CAAA;AACR,CAAC,EAJW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAIlC;AACD;;GAEG;AACH,IAAY,sBAaX;AAbD,WAAY,sBAAsB;IAChC;;OAEG;IACH,qEAAS,CAAA;IACT;;OAEG;IACH,iFAAW,CAAA;IACX;;OAEG;IACH,uEAAM,CAAA;AACR,CAAC,EAbW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAajC;AAED;;GAEG;AACH,IAAY,sBAaX;AAbD,WAAY,sBAAsB;IAChC;;OAEG;IACH,uEAAM,CAAA;IACN;;OAEG;IACH,uEAAM,CAAA;IACN;;OAEG;IACH,6EAAS,CAAA;AACX,CAAC,EAbW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAajC","file":"controls/carousel/ICarouselProps.js","sourcesContent":["import * as  React from 'react';\r\nimport { ICssInput } from \"@uifabric/utilities/lib\";\r\nimport { ICarouselImageProps } from \"./CarouselImage\";\r\n\r\n/**\r\n * Provides options for carousel buttons location.\r\n */\r\nexport enum CarouselButtonsLocation {\r\n  top = 1,\r\n  center,\r\n  bottom\r\n}\r\n/**\r\n * Provides options for carousel buttons display mode.\r\n */\r\nexport enum CarouselButtonsDisplay {\r\n  /**\r\n   * Reserves space for buttons on both sides of the control.\r\n   */\r\n  block = 1,\r\n  /**\r\n   * Only icon buttons are displayed.\r\n   */\r\n  buttonsOnly,\r\n  /**\r\n   * Buttons are not displayed. They appear onhover event.\r\n   */\r\n  hidden\r\n}\r\n\r\n/**\r\n * Provides options for carousel indicators' shape\r\n */\r\nexport enum CarouselIndicatorShape {\r\n  /**\r\n   * Indicators displayed as cirlces\r\n   */\r\n  circle,\r\n  /**\r\n   * Indicators displayed as squares\r\n   */\r\n  square,\r\n  /**\r\n   * Indicators displayed as rectangles\r\n   */\r\n  rectangle\r\n}\r\n\r\nexport interface ICarouselProps {\r\n  /**\r\n   * Specifies the initial index of the element to be displayed.\r\n   */\r\n  startIndex?: number;\r\n  /**\r\n   * Indicates if infinite scrolling is enabled.\r\n   */\r\n  isInfinite?: boolean;\r\n  /**\r\n   * Property indicates if the next item button can be clicked. If not provided, status of the button is calculated based on the current index.\r\n   * It is mandatory when triggerPageEvent is used.\r\n   */\r\n  canMoveNext?: boolean;\r\n  /**\r\n   * Property indicates if the previous item button can be clicked. If not provided, status of the button is calculated based on the current index.\r\n   * It is mandatory when triggerPageEvent is used.\r\n   */\r\n  canMovePrev?: boolean;\r\n\r\n  /**\r\n   * Specifies the location of the buttons inside the container.\r\n   */\r\n  buttonsLocation: CarouselButtonsLocation;\r\n  /**\r\n   * Specifies the buttons container display mode.\r\n   */\r\n  buttonsDisplay: CarouselButtonsDisplay;\r\n\r\n  /**\r\n   * Allows to specify own styles for carousel container.\r\n   */\r\n  containerStyles?: ICssInput;\r\n  /**\r\n   * Allows to specify own styles for loading component.\r\n   */\r\n  loadingComponentContainerStyles?: ICssInput;\r\n  /**\r\n   * Allows to specify own styles for elements container.\r\n   */\r\n  contentContainerStyles?: ICssInput;\r\n  /**\r\n   * Allows to specify own styles for buttons container.\r\n   */\r\n  containerButtonsStyles?: ICssInput;\r\n  /**\r\n   * Allows to specify own styles for previous item button.\r\n   */\r\n  prevButtonStyles?: ICssInput;\r\n  /**\r\n   * Allows to specify own styles for next item button.\r\n   */\r\n  nextButtonStyles?: ICssInput;\r\n\r\n  /**\r\n   * Name of the icon to be used for PreviousItem button. Default 'ChevronLeft'.\r\n   */\r\n  prevButtonIconName?: string;\r\n  /**\r\n   * Name of the icon to be used for NextItem button. Default 'ChevronRight'.\r\n   */\r\n  nextButtonIconName?: string;\r\n  /**\r\n   * Triggers parent control to provide new element to be displayed. After the method is executed, carousel control switches to processing mode and loadingComponent is displayed.\r\n   */\r\n  triggerPageEvent?: (index: number) => void;\r\n  /**\r\n   * Fixed array of elemenets to be displayed in carousel - if triggerPageEvent is not used.\r\n   * In case triggerPageEvent is in use, JSX.Element has to be provided. Elements are distinguished based on the 'key' property.\r\n   * It's also possible to provide an array of ICarouselImageProps to use default implementation for the elements\r\n   */\r\n  element: JSX.Element | JSX.Element[] | ICarouselImageProps[];\r\n  /**\r\n   * Allows to inject custom component when the carousel is in processing state. If not provided, Spinner is displayed.\r\n   */\r\n  loadingComponent?: JSX.Element;\r\n\r\n  /**\r\n   * Callback function called after the next item button is clicked. Not used when triggerPageEvent is specified.\r\n   */\r\n  onMoveNextClicked?: (currentIndex: number) => void;\r\n  /**\r\n   * Callback function called after the previous item button is clicked. Not used when triggerPageEvent is specified.\r\n   */\r\n  onMovePrevClicked?: (currentIndex: number) => void;\r\n\r\n  /**\r\n   * In case triggerPageEvent is in use, provides total number of slides in the carousel.\r\n   */\r\n  elementsCount?: number;\r\n\r\n  /**\r\n   * Callback function called when element has been selected in the carousel\r\n   */\r\n  onSelect?: (selectedIndex: number) => void;\r\n\r\n  /**\r\n   * Enables animation on the Carousel as it transitions between slides.\r\n   * This property is ignored if triggerPageEvent is in use.\r\n   */\r\n  slide?: boolean;\r\n\r\n  /**\r\n   * The amount of time to delay between automatically cycling an item. If null, carousel will not automatically cycle.\r\n   */\r\n  interval?: number | null;\r\n\r\n  /**\r\n   * Specifies if slides cycling should pause when hovering over the content (touchStart on touch devices)\r\n   */\r\n  pauseOnHover?: boolean;\r\n\r\n  /**\r\n   * Specifies if set of slide position indicators is shown\r\n   */\r\n  indicators?: boolean;\r\n\r\n  /**\r\n   * Specifies indicators' shape. If onRenderIndicator is provided - this property is ignored\r\n   */\r\n  indicatorShape?: CarouselIndicatorShape;\r\n\r\n  /**\r\n   * Specifies additional class applied to slide position indicators\r\n   */\r\n  indicatorClassName?: string;\r\n\r\n  /**\r\n   * Specifies additional styles applied to slide position indicators\r\n   */\r\n  indicatorStyle?: React.CSSProperties;\r\n\r\n  /**\r\n   * Function to render indicator element\r\n   */\r\n  onRenderIndicator?: (index: number, onClick: (e: React.MouseEvent<HTMLElement> | React.TouchEvent<HTMLElement>, selectedIndex: number) => void) => JSX.Element;\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}