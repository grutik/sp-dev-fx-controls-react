{"version":3,"sources":["controls/treeView/DropdownTreeItemAction.tsx"],"names":[],"mappings":"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","file":"controls/treeView/DropdownTreeItemAction.js","sourcesContent":["import * as React from 'react';\r\nimport { IContextualMenuItem, IContextualMenuProps } from 'office-ui-fabric-react/lib/ContextualMenu';\r\nimport { IconButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { ITreeItem } from './ITreeItem';\r\nimport { ITreeItemAction, IConcreteTreeItemActionProps } from './ITreeItemActions';\r\nimport styles from './TreeView.module.scss';\r\n\r\n/**\r\n * Renders the controls for Dropdown TreeItem action component\r\n */\r\nexport class DropdownTreeItemAction extends React.Component<IConcreteTreeItemActionProps> {\r\n\r\n  /**\r\n   * componentWillMount lifecycle hook\r\n   */\r\n  public componentWillMount(): void {\r\n    this.checkForImmediateInvocations();\r\n  }\r\n\r\n  /**\r\n   * Prepates contextual menu items for dropdown.\r\n   */\r\n  private prepareContextualMenuProps = (treeItem: ITreeItem, treeItemActions: ITreeItemAction[]): IContextualMenuProps => {\r\n    let items: IContextualMenuItem[] = [];\r\n    let useTargetWidth = true;\r\n\r\n    for (const treeItemAction of treeItemActions) {\r\n      if (!treeItemAction.hidden) {\r\n        let treeItemActionMenuItem: IContextualMenuItem = {\r\n          key: treeItem.key.toString(),\r\n          onClick: () => { this.onActionExecute(treeItemAction); }\r\n        };\r\n\r\n        treeItemActionMenuItem.text = treeItemAction.title;\r\n        treeItemActionMenuItem.name = treeItemAction.title;\r\n        treeItemActionMenuItem.iconProps = treeItemAction.iconProps;\r\n        useTargetWidth = treeItemActionMenuItem.iconProps ? false : true;\r\n\r\n        items.push(treeItemActionMenuItem);\r\n      }\r\n    }\r\n\r\n    const contextualMenuProps: IContextualMenuProps = {\r\n      items,\r\n      useTargetWidth\r\n    };\r\n    return contextualMenuProps;\r\n  }\r\n\r\n  /**\r\n   * Prepare treeItem action button style.\r\n   */\r\n  private getTreeItemActionActionButtonStyle = (): React.CSSProperties => {\r\n    let result: React.CSSProperties = {\r\n      backgroundColor: \"transparent\",\r\n      width: \"14px\",\r\n      display: \"inline-flex\",\r\n      padding: \"0px\"\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Check if there are action to immediatly invoke\r\n   */\r\n  private checkForImmediateInvocations() {\r\n    const { treeItemActions } = this.props;\r\n    for (const action of treeItemActions) {\r\n      if (action.invokeActionOnRender) {\r\n        this.onActionExecute(action);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler to execute selected action.\r\n   */\r\n  private onActionExecute = async (treeItemAction: ITreeItemAction) => {\r\n    const updateAction = await treeItemAction.actionCallback(this.props.treeItem);\r\n    this.props.treeItemActionCallback();\r\n  }\r\n\r\n  /**\r\n   * Default React render method\r\n   */\r\n  public render(): React.ReactElement<IConcreteTreeItemActionProps> {\r\n    const { treeItem, treeItemActions } = this.props;\r\n\r\n    const contextualMenuProps = this.prepareContextualMenuProps(treeItem, treeItemActions);\r\n\r\n    return (\r\n      <div>\r\n        <IconButton\r\n          menuProps={contextualMenuProps}\r\n          menuIconProps={{ iconName: 'MoreVertical' }}\r\n          className={styles.actionMore}\r\n          title=\"More\"\r\n          ariaLabel=\"More\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}