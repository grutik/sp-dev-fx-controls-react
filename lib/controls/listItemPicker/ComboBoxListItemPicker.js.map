{"version":3,"sources":["controls/listItemPicker/ComboBoxListItemPicker.tsx"],"names":[],"mappings":"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","file":"controls/listItemPicker/ComboBoxListItemPicker.js","sourcesContent":["import * as strings from 'ControlStrings';\r\nimport * as React from \"react\";\r\nimport { Label } from \"office-ui-fabric-react/lib/Label\";\r\nimport { IComboBoxListItemPickerProps, IComboBoxListItemPickerState } from \".\";\r\nimport * as telemetry from '../../common/telemetry';\r\nimport { ComboBox, IComboBoxOption } from \"office-ui-fabric-react/lib/ComboBox\";\r\nimport { ListItemRepository } from '../../common/dal/ListItemRepository';\r\n\r\n\r\nexport class ComboBoxListItemPicker extends React.Component<IComboBoxListItemPickerProps, IComboBoxListItemPickerState> {\r\n  private _listItemRepo: ListItemRepository;\r\n  public selectedItems: any[];\r\n\r\n  constructor(props: IComboBoxListItemPickerProps) {\r\n    super(props);\r\n\r\n    telemetry.track('ComboBoxListItemPicker', {});\r\n\r\n    // States\r\n    this.state = {\r\n      noresultsFoundText: !this.props.noResultsFoundText ? strings.genericNoResultsFoundText : this.props.noResultsFoundText,\r\n      showError: false,\r\n      errorMessage: \"\",\r\n      suggestionsHeaderText: !this.props.suggestionsHeaderText ? strings.ListItemPickerSelectValue : this.props.suggestionsHeaderText\r\n    };\r\n\r\n    // Get SPService Factory\r\n    this._listItemRepo = new ListItemRepository(this.props.webUrl, this.props.spHttpClient);\r\n\r\n    this.selectedItems = [];\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this.loadOptions();\r\n  }\r\n\r\n  protected async loadOptions(): Promise<void> {\r\n    const {\r\n      filter,\r\n      keyColumnInternalName,\r\n      listId,\r\n      columnInternalName,\r\n      webUrl,\r\n      itemLimit,\r\n      defaultSelectedItems,\r\n      onInitialized\r\n    } = this.props;\r\n    let query = filter || \"\";\r\n    //query += filter;\r\n    let keyColumnName = keyColumnInternalName || \"Id\";\r\n    let listItems = await this._listItemRepo.getListItemsByFilterClause(query,\r\n      listId,\r\n      columnInternalName,\r\n      keyColumnInternalName,\r\n      webUrl,\r\n      itemLimit || 100);\r\n\r\n    let options = listItems.map(option => {\r\n      return {\r\n        key: option[keyColumnName],\r\n        text: option[columnInternalName || \"Id\"]\r\n      };\r\n    });\r\n    if (defaultSelectedItems) {\r\n      //if passed only ids\r\n      if (!isNaN(defaultSelectedItems[0])) {\r\n        this.selectedItems = options.filter(opt => defaultSelectedItems.indexOf(opt.key) >= 0);\r\n      }\r\n      else {\r\n        this.selectedItems = options.filter(opt => defaultSelectedItems.map(selected => selected[keyColumnName]).indexOf(opt.key) >= 0);\r\n      }\r\n    }\r\n    this.setState({\r\n      availableOptions: options\r\n    });\r\n    if(onInitialized){\r\n      onInitialized();\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IComboBoxListItemPickerProps, prevState: IComboBoxListItemPickerState): void {\r\n    if (this.props.listId !== prevProps.listId) {\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the field\r\n   */\r\n  public render(): React.ReactElement<IComboBoxListItemPickerProps> {\r\n    const { className, disabled } = this.props;\r\n\r\n    return (this.state.availableOptions ? (\r\n      <div>\r\n        <ComboBox options={this.state.availableOptions}\r\n                  autoComplete={this.props.autoComplete}\r\n                  comboBoxOptionStyles={this.props.comboBoxOptionStyles}\r\n                  allowFreeform={this.props.allowFreeform}\r\n                  keytipProps={this.props.keytipProps}\r\n                  onMenuDismissed={this.props.onMenuDismiss}\r\n                  onMenuOpen={this.props.onMenuOpen}\r\n                  text={this.props.text}\r\n                  onChanged={this.onChanged}\r\n                  multiSelect={this.props.multiSelect}\r\n                  defaultSelectedKey={this.selectedItems.map(item=>item.key) || []}\r\n                  className={className}\r\n                  disabled={disabled} />\r\n\r\n        {!!this.state.errorMessage &&\r\n          (<Label style={{ color: '#FF0000' }}> {this.state.errorMessage} </Label>)}\r\n      </div>) : <span>Loading...</span>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * On Selected Item\r\n   */\r\n  private onChanged = (option?: IComboBoxOption, index?: number, value?: string, submitPendingValueEvent?: any): void => {\r\n    if(this.props.multiSelect){\r\n      if (option && option.selected) {\r\n        this.selectedItems.push({\r\n          [this.props.keyColumnInternalName || \"Id\"]: option.key,\r\n          [this.props.columnInternalName]: option.text,\r\n          selected: option.selected\r\n        });\r\n      } else {\r\n        this.selectedItems = this.selectedItems.filter(o => o[this.props.keyColumnInternalName || \"Id\"] !== option.key);\r\n      }\r\n    }else{\r\n      this.selectedItems.push({\r\n        [this.props.keyColumnInternalName || \"Id\"]: option.key,\r\n        [this.props.columnInternalName]: option.text\r\n      });\r\n\r\n      this.selectedItems = this.selectedItems.filter(o => o[this.props.keyColumnInternalName || \"Id\"] === option.key);\r\n    }\r\n\r\n    this.props.onSelectedItem(this.selectedItems);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}